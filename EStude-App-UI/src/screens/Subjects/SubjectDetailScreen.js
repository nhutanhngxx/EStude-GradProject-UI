import React, { useState, useEffect, useContext } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  ActivityIndicator,
} from "react-native";
import { AuthContext } from "../../contexts/AuthContext";
import { loadAssignmentsWithStatus } from "../../services/assignmentHelper";
import assignmentService from "../../services/assignmentService";
import subjectGradeService from "../../services/subjectGradeService";
import attendanceService from "../../services/attandanceService";
import { useToast } from "../../contexts/ToastContext";
import { useSocket } from "../../contexts/SocketContext";

const formatDate = (dateString) => {
  const d = new Date(dateString);
  const day = d.getDate().toString().padStart(2, "0");
  const month = (d.getMonth() + 1).toString().padStart(2, "0");
  const year = d.getFullYear();
  return `${day}/${month}/${year}`;
};

export default function SubjectDetailScreen({ route, navigation }) {
  const { subject, tab } = route.params;
  const { user } = useContext(AuthContext);
  const socket = useSocket();
  const { showToast } = useToast();

  // console.log("subject:", subject);

  const [activeTab, setActiveTab] = useState(tab || "ƒêi·ªÉm");
  const [loading, setLoading] = useState(false);
  const [grade, setGrade] = useState(null);
  const [attendance, setAttendance] = useState([]);
  const [assignments, setAssignments] = useState([]);
  const [notifications, setNotifications] = useState([]);

  const tabs = [
    "ƒêi·ªÉm",
    "ƒêi·ªÉm danh",
    "B√†i t·∫≠p",
    // , "Th√¥ng b√°o"
  ];

  useEffect(() => {
    if (subject?.name) {
      navigation.setOptions({
        title: `${subject.name.toUpperCase()}`,
      });
    }
  }, [subject, navigation]);

  useEffect(() => {
    if (!socket || !subject?.classSubjectId || !user?.userId) return;

    const handleNewSession = async (msg) => {
      console.log("üì© Received session event:", msg);
      try {
        setLoading(true);
        const res =
          await attendanceService.getAttentanceSessionByClassSubjectForStudent(
            subject.classSubjectId,
            user.userId
          );
        setAttendance(res || []);
        showToast(`Phi√™n ƒëi·ªÉm danh m·ªõi: ${msg.sessionName || "Kh√¥ng t√™n"}`, {
          type: "success",
        });
      } catch (e) {
        console.error("Failed to load attendance:", e);
        showToast("L·ªói khi c·∫≠p nh·∫≠t danh s√°ch ƒëi·ªÉm danh!", { type: "error" });
      } finally {
        setLoading(false);
      }
    };

    const handleNewAssignment = async (msg) => {
      console.log("üì© Received assignment event:", msg);
      try {
        setLoading(true);
        const res = await loadAssignmentsWithStatus(
          user.userId,
          null,
          null,
          subject.classSubjectId
        );

        setAssignments(res || []);
        showToast(`B√†i t·∫≠p m·ªõi: ${msg.title || "Kh√¥ng t√™n"}`, {
          type: "success",
        });
      } catch (e) {
        console.error("Failed to load assignments:", e);
        showToast("L·ªói khi c·∫≠p nh·∫≠t danh s√°ch b√†i t·∫≠p!", { type: "error" });
      } finally {
        setLoading(false);
      }
    };

    const subscription = socket.subscribe(
      `/topic/class/${subject.classSubjectId}/sessions`,
      handleNewSession
    );

    const assignmentSubscription = socket.subscribe(
      `/topic/class/${subject.classSubjectId}/assignments`,
      handleNewAssignment
    );

    return () => {
      if (subscription?.unsubscribe) {
        subscription.unsubscribe();
        console.log(
          `üõë Unsubscribed from /topic/class/${subject.classSubjectId}/sessions`
        );
      }
      if (assignmentSubscription?.unsubscribe) {
        assignmentSubscription.unsubscribe();
        console.log(
          `üõë Unsubscribed from /topic/class/${subject.classSubjectId}/assignments`
        );
      }
      socket.unsubscribe(`/topic/class/${subject.classSubjectId}/sessions`);
      socket.unsubscribe(`/topic/class/${subject.classSubjectId}/assignments`);
    };
  }, [socket, subject?.classSubjectId, user?.userId]);

  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      try {
        if (activeTab === "ƒêi·ªÉm") {
          const res =
            await subjectGradeService.getGradesOfStudentByClassSubject(
              user.userId,
              subject.classSubjectId
            );
          setGrade(res);
        } else if (activeTab === "B√†i t·∫≠p") {
          if (subject.classId) {
            const res = await loadAssignmentsWithStatus(
              user.userId,
              null,
              null,
              subject.classSubjectId
            );
            const assignmentsForThisClass = res.filter(
              (a) => a.classSubject?.classSubjectId === subject.classSubjectId
            );
            setAssignments(assignmentsForThisClass);
          }
        } else if (activeTab === "ƒêi·ªÉm danh") {
          const res =
            await attendanceService.getAttentanceSessionByClassSubjectForStudent(
              subject.classSubjectId,
              user.userId
            );
          setAttendance(res || []);
        }
      } catch (e) {
        console.log("Load error:", e);
        if (activeTab === "ƒêi·ªÉm") setGrade(null);
        if (activeTab === "B√†i t·∫≠p") setAssignments([]);
        if (activeTab === "ƒêi·ªÉm danh") setAttendance([]);
      } finally {
        setLoading(false);
      }
    };
    loadData();
  }, [activeTab]);

  return (
    <View style={styles.safe}>
      <ScrollView
        style={styles.container}
        contentContainerStyle={{ flexGrow: 1, paddingBottom: 24 }}
      >
        {/* Header m√¥n h·ªçc */}
        <View style={styles.headerCard}>
          <View style={styles.classInfo}>
            <Text style={styles.classText}>
              {subject.teacherName || "Ch∆∞a c√≥"}
            </Text>
            <Text style={styles.classText}>{subject.semester}</Text>
            <Text style={styles.deadline}>
              Th·ªùi gian b·∫Øt ƒë·∫ßu: {formatDate(subject.beginDate)}
            </Text>
            <Text style={styles.deadline}>
              Th·ªùi gian k·∫øt th√∫c: {formatDate(subject.endDate)}
            </Text>
          </View>
        </View>

        {/* Tabs */}
        <View style={styles.tabRow}>
          {tabs.map((tab, index) => (
            <TouchableOpacity
              key={tab}
              style={[
                styles.tabButton,
                index === 0 && styles.firstTab,
                index === tabs.length - 1 && styles.lastTab,
                activeTab === tab && styles.activeTab,
              ]}
              onPress={() => setActiveTab(tab)}
            >
              <Text
                style={[
                  styles.tabText,
                  activeTab === tab && styles.activeTabText,
                ]}
              >
                {tab}
              </Text>
            </TouchableOpacity>
          ))}
        </View>

        {/* N·ªôi dung */}
        {loading ? (
          <ActivityIndicator
            size="large"
            color="#2ecc71"
            style={{ marginTop: 20 }}
          />
        ) : (
          <View style={styles.tabContent}>
            {activeTab === "ƒêi·ªÉm" && (
              <View style={styles.cardContainer}>
                <Text style={styles.cardTitle}>K·∫øt qu·∫£ h·ªçc t·∫≠p</Text>

                <View style={styles.verticalTable}>
                  {/* Th∆∞·ªùng k·ª≥ 1-3 */}
                  {(grade?.regularScores ?? ["-", "-", "-"]).map((v, i) => (
                    <View
                      style={[
                        styles.row,
                        i % 2 === 0 ? styles.rowEven : styles.rowOdd,
                        i === (grade?.regularScores?.length ?? 3) - 1 && {
                          borderBottomWidth: 1,
                        },
                      ]}
                      key={`reg${i}`}
                    >
                      <Text style={styles.rowLabel}>Th∆∞·ªùng k·ª≥ {i + 1}</Text>
                      <Text style={styles.rowValue}>{v ?? "-"}</Text>
                    </View>
                  ))}

                  {/* Gi·ªØa k·ª≥ */}
                  <View style={styles.row}>
                    <Text style={styles.rowLabel}>Gi·ªØa k·ª≥</Text>
                    <Text style={styles.rowValue}>
                      {grade?.midtermScore ?? "-"}
                    </Text>
                  </View>

                  {/* Cu·ªëi k·ª≥ */}
                  <View style={styles.row}>
                    <Text style={styles.rowLabel}>Cu·ªëi k·ª≥</Text>
                    <Text style={styles.rowValue}>
                      {grade?.finalScore ?? "-"}
                    </Text>
                  </View>

                  {/* ƒêi·ªÉm trung b√¨nh */}
                  <View style={styles.row}>
                    <Text style={styles.rowLabel}>ƒêi·ªÉm trung b√¨nh</Text>
                    <Text style={styles.rowValue}>
                      {grade?.actualAverage ?? "-"}
                    </Text>
                  </View>

                  <View style={styles.row}>
                    <Text style={styles.rowLabel}>H·ªçc l·ª±c</Text>
                    <Text style={styles.rowValue}>{"-"}</Text>
                  </View>

                  <View style={styles.row}>
                    <Text style={styles.rowLabel}>X·∫øp lo·∫°i</Text>
                    <Text style={styles.rowValue}>{"-"}</Text>
                  </View>
                </View>
              </View>
            )}

            {activeTab === "B√†i t·∫≠p" && (
              <View style={styles.cardContainer}>
                <Text style={styles.cardTitle}>Danh s√°ch b√†i t·∫≠p</Text>
                {assignments.length > 0 ? (
                  assignments.map((as) => (
                    <TouchableOpacity
                      key={as.assignmentId}
                      style={styles.assignmentItem}
                      onPress={() =>
                        navigation.navigate("ChiTietBaiTap", {
                          assignment: as,
                          isExam: activeTab === "Exams",
                          status: as.status || "Ch∆∞a n·ªôp",
                          submissionId: as.submissionId || null,
                        })
                      }
                    >
                      <View style={{ flex: 1 }}>
                        <Text style={styles.assignmentTitle}>{as.title}</Text>
                        <Text style={styles.assignmentDeadline}>
                          H·∫°n n·ªôp:{" "}
                          {new Date(as.dueDate).toLocaleString("vi-VN", {
                            hour: "2-digit",
                            minute: "2-digit",
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric",
                          })}
                        </Text>
                      </View>
                      <Text
                        style={[
                          styles.assignmentStatus,
                          as.status === "ƒê√£ n·ªôp" ? styles.done : styles.pending,
                        ]}
                      >
                        {as.status}
                      </Text>
                    </TouchableOpacity>
                  ))
                ) : (
                  <Text style={styles.emptyText}>Ch∆∞a c√≥ b√†i t·∫≠p</Text>
                )}
              </View>
            )}

            {activeTab === "ƒêi·ªÉm danh" && (
              <View style={styles.cardContainer}>
                <Text style={styles.cardTitle}>Danh s√°ch phi√™n ƒëi·ªÉm danh</Text>
                {attendance.length > 0 ? (
                  attendance.map((ses) => {
                    const now = new Date();
                    const startTime = new Date(ses.startTime);
                    const endTime = new Date(ses.endTime);
                    const canMark =
                      now.getTime() >= startTime.getTime() && !ses.status;

                    return (
                      <View key={ses.sessionId} style={styles.recordCard}>
                        {/* C·ªôt tr√°i: th√¥ng tin */}
                        <View style={styles.recordInfo}>
                          <Text style={styles.sessionName}>
                            {ses.sessionName}
                          </Text>
                          <Text style={styles.sessionTime}>
                            B·∫Øt ƒë·∫ßu:{" "}
                            {startTime.toLocaleString("vi-VN", {
                              day: "2-digit",
                              month: "2-digit",
                              year: "numeric",
                              hour: "2-digit",
                              minute: "2-digit",
                            })}
                          </Text>

                          <Text style={styles.sessionTime}>
                            K·∫øt th√∫c:{" "}
                            {endTime.toLocaleString("vi-VN", {
                              day: "2-digit",
                              month: "2-digit",
                              year: "numeric",
                              hour: "2-digit",
                              minute: "2-digit",
                            })}
                          </Text>
                        </View>

                        {/* C·ªôt ph·∫£i: tr·∫°ng th√°i / n√∫t */}
                        <View style={styles.recordActions}>
                          {!ses.status ? (
                            <TouchableOpacity
                              style={[
                                styles.attendanceButton,
                                !canMark && { backgroundColor: "#ccc" },
                              ]}
                              disabled={!canMark}
                              onPress={async () => {
                                try {
                                  const res =
                                    await attendanceService.markAttendance(
                                      ses.sessionId,
                                      user.userId,
                                      "BUTTON_PRESS"
                                    );

                                  if (res) {
                                    const updated =
                                      await attendanceService.getAttentanceSessionByClassSubjectForStudent(
                                        subject.classSubjectId,
                                        user.userId
                                      );
                                    setAttendance(updated || []);
                                    showToast("B·∫°n ƒë√£ ƒëi·ªÉm danh th√†nh c√¥ng!", {
                                      type: "success",
                                    });
                                  } else {
                                    showToast("ƒêi·ªÉm danh th·∫•t b·∫°i!", {
                                      type: "error",
                                    });
                                  }
                                } catch (error) {
                                  showToast("C√≥ l·ªói x·∫£y ra khi ƒëi·ªÉm danh!", {
                                    type: "error",
                                  });
                                  console.error(error);
                                }
                              }}
                            >
                              <Text style={styles.attendanceButtonText}>
                                {canMark ? "ƒêI·ªÇM DANH" : "CH∆ØA M·ªû"}
                              </Text>
                            </TouchableOpacity>
                          ) : (
                            <Text
                              style={[
                                styles.statusText,
                                ses.status === "PRESENT"
                                  ? { color: "#27ae60" }
                                  : ses.status === "ABSENT"
                                  ? { color: "#e74c3c" }
                                  : ses.status === "LATE"
                                  ? { color: "#f39c12" }
                                  : { color: "#999" },
                              ]}
                            >
                              {ses.status === "PRESENT"
                                ? "C√ì M·∫∂T"
                                : ses.status === "ABSENT"
                                ? "V·∫ÆNG"
                                : ses.status === "LATE"
                                ? "TR·ªÑ"
                                : "Ch∆∞a ƒëi·ªÉm danh"}
                            </Text>
                          )}

                          <TouchableOpacity
                            onPress={() =>
                              navigation.navigate("AttendanceDetail", {
                                session: ses,
                                subject: subject,
                                userId: user.userId,
                              })
                            }
                          >
                            <Text style={styles.detailLink}>Xem chi ti·∫øt</Text>
                          </TouchableOpacity>
                        </View>
                      </View>
                    );
                  })
                ) : (
                  <Text style={styles.emptyText}>Ch∆∞a c√≥ phi√™n ƒëi·ªÉm danh</Text>
                )}
              </View>
            )}

            {/* {activeTab === "Th√¥ng b√°o" && (
              <View style={styles.cardContainer}>
                <Text style={styles.cardTitle}>Th√¥ng b√°o g·∫ßn ƒë√¢y</Text>
                {notifications.length > 0 ? (
                  notifications.map((nt) => (
                    <View key={nt.notificationId} style={styles.recordCard}>
                      <Text>{new Date(nt.sentAt).toLocaleDateString()}</Text>
                      <Text>{nt.message}</Text>
                    </View>
                  ))
                ) : (
                  <Text style={styles.emptyText}>Ch∆∞a c√≥ th√¥ng b√°o</Text>
                )}
              </View>
            )} */}
          </View>
        )}
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  safe: { flex: 1, backgroundColor: "#f5f5f5" },
  container: { flex: 1, padding: 16 },
  headerCard: {
    backgroundColor: "#fff",
    padding: 16,
    borderRadius: 12,
    marginBottom: 16,
  },
  classInfo: {
    gap: 5,
  },
  classText: {
    fontSize: 13,
    color: "#555",
    marginTop: 2,
  },
  deadline: {
    fontSize: 12,
    color: "#888",
  },
  tabRow: {
    flexDirection: "row",
    backgroundColor: "#fff",
    borderRadius: 8,
    marginBottom: 12,
    overflow: "hidden",
  },
  tabButton: {
    flex: 1,
    paddingVertical: 10,
    alignItems: "center",
  },
  firstTab: {
    borderTopLeftRadius: 8,
    borderBottomLeftRadius: 8,
  },
  lastTab: {
    borderTopRightRadius: 8,
    borderBottomRightRadius: 8,
  },
  activeTab: { backgroundColor: "#27ae60" },
  tabText: { fontSize: 14, color: "#333" },
  activeTabText: { color: "#fff", fontWeight: "bold" },
  tabContent: {
    flex: 1,
    minHeight: "77%", // Chi·∫øm to√†n b·ªô chi·ªÅu cao c√≤n l·∫°i
  },
  cardContainer: {
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: "#000",
    shadowOpacity: 0.06,
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 4,
    elevation: 2,
    flex: 1,
  },
  cardTitle: {
    fontSize: 16,
    fontWeight: "bold",
    marginBottom: 10,
    color: "#333",
  },
  assignmentItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  assignmentTitle: { fontSize: 15, fontWeight: "500", color: "#333" },
  assignmentDeadline: { fontSize: 13, color: "#666", marginTop: 2 },
  assignmentStatus: { fontSize: 13, fontWeight: "bold" },
  done: { color: "#27ae60" },
  pending: { color: "#e74c3c" },
  recordCard: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    backgroundColor: "#fff",
    borderRadius: 10,
    padding: 12,
    marginBottom: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  emptyText: { textAlign: "center", color: "#999", marginTop: 12 },
  verticalTable: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 10,
    overflow: "hidden",
    marginTop: 8,
  },
  row: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingVertical: 12,
    paddingHorizontal: 14,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  rowEven: { backgroundColor: "#fafafa" },
  rowOdd: { backgroundColor: "#fff" },
  rowLabel: {
    flex: 1,
    fontSize: 14,
    fontWeight: "500",
    color: "#333",
  },
  rowValue: {
    flex: 1,
    fontSize: 14,
    textAlign: "right",
    color: "#2e7d32",
    fontWeight: "600",
  },
  recordInfo: {
    flex: 1,
    marginRight: 12,
    gap: 5,
  },
  sessionName: {
    fontWeight: "600",
    color: "#2e7d32",
    fontSize: 16,
  },
  sessionTime: {
    fontSize: 12,
    color: "#555",
    marginTop: 2,
  },
  recordActions: {
    alignItems: "flex-end",
  },
  attendanceButton: {
    backgroundColor: "#2e7d32",
    paddingVertical: 6,
    paddingHorizontal: 12,
    borderRadius: 6,
    marginBottom: 4,
  },
  attendanceButtonText: {
    color: "#fff",
    fontWeight: "600",
    fontSize: 13,
  },
  statusText: {
    fontWeight: "700",
    fontSize: 14,
    marginBottom: 4,
  },
  detailLink: {
    color: "#2e7d32",
    fontSize: 13,
    textDecorationLine: "underline",
  },
});
